diff --git a/client3.py b/client3.py
index 3fc09b7..761dcab 100644
--- a/client3.py
+++ b/client3.py
@@ -28,32 +28,35 @@ QUERY = "http://localhost:8080/query?id={}"
 # 500 server request
 N = 500
 
-
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2
     return stock, bid_price, ask_price, price
 
-
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
-
+    if price_b == 0:
+        return None
+    return price_a / price_b
 
 # Main
 if __name__ == "__main__":
-    # Query the price once every N seconds.
-    for _ in iter(range(N)):
-        quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
-
-        """ ----------- Update to get the ratio --------------- """
-        for quote in quotes:
-            stock, bid_price, ask_price, price = getDataPoint(quote)
-            print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
-
-        print("Ratio %s" % getRatio(price, price))
+    for _ in range(N):
+        try:
+            url = QUERY.format(random.random())
+            print(f"Requesting URL: {url}")
+            response = urllib.request.urlopen(url)
+            quotes = json.loads(response.read())
+            # Process quotes as needed
+            for quote in quotes:
+                stock, bid_price, ask_price, price = getDataPoint(quote)
+                print(f"Stock: {stock}, Bid Price: {bid_price}, Ask Price: {ask_price}, Price: {price}")
+        except urllib.error.HTTPError as e:
+            print(f"HTTP error occurred: {e.code} - {e.reason}")
+        except urllib.error.URLError as e:
+            print(f"URL error occurred: {e.reason}")
+        except Exception as e:
+            print(f"An unexpected error occurred: {e}")
\ No newline at end of file
diff --git a/client_test.py b/client_test.py
index af2bf26..c252d25 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,25 +1,24 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
-class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-
-  """ ------------ Add more unit tests ------------ """
+class TestClient3(unittest.TestCase):
 
+    def test_getDataPoint(self):
+        quote = {
+            'stock': 'ABC',
+            'top_bid': {'price': 120.48},
+            'top_ask': {'price': 121.22}
+        }
+        stock, bid_price, ask_price, price = getDataPoint(quote)
+        self.assertEqual(stock, 'ABC')
+        self.assertEqual(bid_price, 120.48)
+        self.assertEqual(ask_price, 121.22)
+        self.assertEqual(price, (120.48 + 121.22) / 2)
 
+    def test_getRatio(self):
+        self.assertEqual(getRatio(120.48, 121.22), 120.48 / 121.22)
+        self.assertEqual(getRatio(120.48, 0), None)
+        self.assertEqual(getRatio(0, 121.22), 0)
 
 if __name__ == '__main__':
-    unittest.main()
+    unittest.main()
\ No newline at end of file
